#BlueJ class context
comment0.target=SortingVisualization
comment0.text=\n\ Creates\ a\ world\ which\ can\ be\ used\ to\ visualize\ sorting\ methods\ by\ arranging\ "blocks"\ on\ \n\ the\ screen.\ \ Each\ block\ is\ it's\ own\ object\ and\ has\ a\ value\ associated\ with\ it.\ \ This\ value\n\ is\ represented\ visually\ by\ it's\ width\ and\ a\ number\ display.\n\ \n\ This\ might\ help\ you\ when\ programming\ -\ https\://docs.oracle.com/javase/8/docs/api/java/util/List.html\n\ \n\ \n\ @authors\ C.\ Brooks-Prenger\ &\ Fares\ Alterawi\n\ @version\ 3.0\n
comment1.params=
comment1.target=void\ act()
comment10.params=list1\ list2
comment10.target=java.util.List\ merge(java.util.List,\ java.util.List)
comment10.text=\ \n\ merges\ 2\ lists\ into\ the\ final\ list,\ checks\ which\ value\ in\ each\ sublist\ is\ smaller\n\ then\ adds\ that\ value\ to\ the\ final\ list\ at\ the\ counter\n\ @param\ list\ 1\ this\ is\ the\ first\ parameter\ for\ the\ mergeSort\ methods\n\ @param\ list\ 2\ this\ is\ the\ second\ parameter\ for\ the\ mergeSort\ methods\n\ @return\ List\ this\ returns\ the\ final\ merged\ list\n
comment11.params=
comment11.target=void\ displayList()
comment11.text=\n\ Display\ the\ list\ of\ blocks\ on\ the\ screen\ in\ same\ order\ as\ they\ are\ stored\ in\ the\ list\n
comment12.params=
comment12.target=int\ getMaxOfRange()
comment12.text=\n\ Return\ the\ max\ value\ that\ the\ block\ are\ able\ to\ have\n\ @return\ The\ maximum\ integer\ value\ the\ blocks\ are\ allowed\ to\ have\n
comment13.params=
comment13.target=java.util.List\ getBlockList()
comment13.text=\n\ Return\ the\ list\ of\ blocks\n\ @return\ The\ list\ of\ blocks\ to\ be\ sorted\n
comment2.params=
comment2.target=SortingVisualization()
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ SortingVisualization.\n
comment3.params=
comment3.target=void\ sortInitializer()
comment3.text=\ \n\ adds\ the\ sort\ button\ the\ the\ screen\ and\ moves\ onto\ the\ next\ case\n
comment4.params=
comment4.target=void\ randomizeInitializer()
comment4.text=\ \n\ adds\ the\ randomize\ button\ the\ the\ screen\ and\ moves\ onto\ the\ next\ case\n
comment5.params=
comment5.target=void\ sortButton()
comment5.text=\ \n\ if\ the\ sortbutton\ is\ clicked\ a\ parellel\ thread\ starts,\ the\ sorting\ is\ done\ in\ the\ parellel\ thread\n
comment6.params=
comment6.target=void\ run()
comment6.text=\ \n\ just\ sorts\ the\ blocklist\n
comment7.params=
comment7.target=void\ randomizeButton()
comment7.text=\ \n\ when\ the\ randomize\ button\ is\ clicked\ all\ the\ blocks\ on\ the\ screen\ are\ deleted\ and\ replaced\ with\ the\ new\ randomzied\ ones\ \n
comment8.params=sublist\ sortedSublist
comment8.target=void\ deepCopy(java.util.List,\ java.util.List)
comment8.text=\ \n\ Literally\ just\ manually\ replaces\ the\ sub\ lists\ elements\ with\ the\ sorted\ sub\ lists\ elements\n\ @param\ subList\ this\ is\ the\ first\ parameter\ for\ the\ deepcopy\ method\n\ @param\ sortedSublsit\ this\ is\ the\ second\ parameter\ for\ the\ deepcopy\ method\n
comment9.params=blockList
comment9.target=java.util.List\ mergeSort(java.util.List)
comment9.text=\ \n\ Makes\ a\ sublist\ of\ the\ main\ list\ that\ references\ the\ same\ memory\ location\ as\ the\ first\ half\ of\ the\ main\ list\n\ Same\ is\ true\ for\ the\ second\ sublist\n\ Makes\ a\ sorted\ copy\ of\ the\ sublists\ that\ is\ deepcopied\ into\ the\ original\ sublists,\ thereby\ updating\ the\ main\ list\n\ merges\ the\ 2\ sorted\ sublists\ \n\ @param\ blockList\ this\ is\ the\ only\ parameter\ for\ the\ mergeSort\ method\n\ @return\ blockList\ this\ returns\ the\ list\ when\ the\ base\ case\ is\ true\n\ @return\ List\ this\ returns\ a\ list\ of\ the\ 2\ merged\ sublists\n
numComments=14
